<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classpepr3d_1_1_geometry_utils">
<title>pepr3d::GeometryUtils Class Reference</title>
<indexterm><primary>pepr3d::GeometryUtils</primary></indexterm>
<para>

<para>Static utility functions that are not closely tied to <link linkend="_classpepr3d_1_1_geometry">Geometry</link>. </para>
 
</para>
<para>
<computeroutput>#include &lt;GeometryUtils.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classpepr3d_1_1_geometry_utils_1_1_tri_ray_int_visitor">TriRayIntVisitor</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename K &gt; </para><para>static bool <link linkend="_classpepr3d_1_1_geometry_utils_1a6fe5d1ec681688da1e249a0f87a4944d">simplifyPolygon</link> (CGAL::Polygon_2&lt; K &gt; &amp;poly)</para>

<para>Simplify polygon, removing unnecessary vertices. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_geometry_utils_1aa40d71268a74cdeb820d931175f14df0"/>static std::vector&lt; DataTriangle::K::Point_3 &gt; <link linkend="_classpepr3d_1_1_geometry_utils_1aa40d71268a74cdeb820d931175f14df0">pointsOnCircle</link> (const DataTriangle::K::Circle_3 &amp;circle, int segments)</para>

<para>Get equidistant points on circle. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_geometry_utils_1a376d662a35f0d4583276472d4576ae7b"/>template&lt;typename K &gt; </para><para>static CGAL::Orientation <link linkend="_classpepr3d_1_1_geometry_utils_1a376d662a35f0d4583276472d4576ae7b">shoelaceOrientationTest</link> (const CGAL::Polygon_2&lt; K &gt; &amp;poly)</para>

<para>Determine orientation of a polygon using shoelace formula Replacement for potentionally buggy <link linkend="_namespace_c_g_a_l">CGAL</link> implementation. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_geometry_utils_1ab7efa1cf650e08d63cfae3f9a7a5c067"/>template&lt;typename Traits_2 &gt; </para><para>static bool <link linkend="_classpepr3d_1_1_geometry_utils_1ab7efa1cf650e08d63cfae3f9a7a5c067">is_valid_polygon_with_holes</link> (const typename Traits_2::Polygon_with_holes_2 &amp;pgn, const Traits_2 &amp;traits)</para>

<para>Check validity of a polygon with holes using shoelace formula instead of a <link linkend="_namespace_c_g_a_l">CGAL</link> orientation test. </para>
</listitem>
            <listitem><para>template&lt;typename Traits_2 &gt; </para><para>static bool <link linkend="_classpepr3d_1_1_geometry_utils_1a0a4acf058ecff218c2f64cb92f6a4090">has_valid_orientation_polygon_with_holes</link> (const typename Traits_2::Polygon_with_holes_2 &amp;pgn, const Traits_2 &amp;traits)</para>
</listitem>
            <listitem><para>static std::pair&lt; DataTriangle::K::Point_3, double &gt; <link linkend="_classpepr3d_1_1_geometry_utils_1a982761c1e66eb293064c3acbffe5ede3">getBoundingSphere</link> (const std::vector&lt; DataTriangle::K::Point_3 &gt; &amp;shape)</para>

<para>Get min bounding sphere of a point shape. </para>
</listitem>
            <listitem><para>static std::pair&lt; DataTriangle::K::Point_3, double &gt; <link linkend="_classpepr3d_1_1_geometry_utils_1a89cc912fcdca2c33502aa050841d660e">getBoundingSphere</link> (const std::vector&lt; DataTriangle::Triangle &gt; &amp;triangles)</para>

<para>Get min bounding sphere of a set of triangles. </para>
</listitem>
            <listitem><para>static std::pair&lt; DataTriangle::K::Point_3, double &gt; <link linkend="_classpepr3d_1_1_geometry_utils_1a8a4bbf6d68fa3474b7ae286d584ebe94">getBoundingSphere</link> (const DataTriangle::Triangle &amp;triangle)</para>

<para>Get min bounding sphere of a triangle. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_geometry_utils_1a3c0957732e9c372ca63b5271cf91d98d"/>static float <link linkend="_classpepr3d_1_1_geometry_utils_1a3c0957732e9c372ca63b5271cf91d98d">segmentPointDistanceSquared</link> (const glm::vec3 &amp;start, const glm::vec3 &amp;end, const glm::vec3 &amp;point)</para>

<para>Find squared distance between a line segment and a point in 3D space. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_geometry_utils_1afee093fc93f94d5d7552611a34931ea2"/>static std::optional&lt; glm::vec3 &gt; <link linkend="_classpepr3d_1_1_geometry_utils_1afee093fc93f94d5d7552611a34931ea2">triangleRayIntersection</link> (const class <link linkend="_classpepr3d_1_1_data_triangle">DataTriangle</link> &amp;tri, ci::Ray ray)</para>

<para>Find intersection point of a ray and a single triangle If the intersection is a segment return one of the edge points. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_geometry_utils_1a1c82cbd47ad61dbf93685a3daf47c49a"/>static bool <emphasis role="strong">isFullyInsideASphere</emphasis> (const DataTriangle::K::Triangle_3 &amp;tri, const DataTriangle::K::Point_3 &amp;origin, double radius)</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_geometry_utils_1a7ee493c277ad6aa4e87b2508a0f6c2c9"/>static bool <emphasis role="strong">isFullyInsideASphere</emphasis> (const DataTriangle::K::Triangle_3 &amp;tri, const glm::vec3 &amp;origin, double radius)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Static utility functions that are not closely tied to <link linkend="_classpepr3d_1_1_geometry">Geometry</link>. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classpepr3d_1_1_geometry_utils_1a982761c1e66eb293064c3acbffe5ede3"/>    <section>
    <title>getBoundingSphere()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>getBoundingSphere</primary><secondary>pepr3d::GeometryUtils</secondary></indexterm>
<indexterm><primary>pepr3d::GeometryUtils</primary><secondary>getBoundingSphere</secondary></indexterm>
<para><computeroutput>std::pair&lt; DataTriangle::K::Point_3, double &gt; pepr3d::GeometryUtils::getBoundingSphere (const std::vector&lt; DataTriangle::K::Point_3 &gt; &amp; shape)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Get min bounding sphere of a point shape. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>shape</entry>
                                <entry>
<para>Polygonal shape represented by a set of points </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classpepr3d_1_1_geometry_utils_1a89cc912fcdca2c33502aa050841d660e"/>    <section>
    <title>getBoundingSphere()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>getBoundingSphere</primary><secondary>pepr3d::GeometryUtils</secondary></indexterm>
<indexterm><primary>pepr3d::GeometryUtils</primary><secondary>getBoundingSphere</secondary></indexterm>
<para><computeroutput>std::pair&lt; DataTriangle::K::Point_3, double &gt; pepr3d::GeometryUtils::getBoundingSphere (const std::vector&lt; DataTriangle::Triangle &gt; &amp; triangles)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Get min bounding sphere of a set of triangles. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>shape</entry>
                                <entry>
<para>Polygonal shape represented by a set of points </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classpepr3d_1_1_geometry_utils_1a8a4bbf6d68fa3474b7ae286d584ebe94"/>    <section>
    <title>getBoundingSphere()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>getBoundingSphere</primary><secondary>pepr3d::GeometryUtils</secondary></indexterm>
<indexterm><primary>pepr3d::GeometryUtils</primary><secondary>getBoundingSphere</secondary></indexterm>
<para><computeroutput>std::pair&lt; DataTriangle::K::Point_3, double &gt; pepr3d::GeometryUtils::getBoundingSphere (const DataTriangle::Triangle &amp; triangle)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Get min bounding sphere of a triangle. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>shape</entry>
                                <entry>
<para>Polygonal shape represented by a set of points </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classpepr3d_1_1_geometry_utils_1a0a4acf058ecff218c2f64cb92f6a4090"/>    <section>
    <title>has_valid_orientation_polygon_with_holes()</title>
<indexterm><primary>has_valid_orientation_polygon_with_holes</primary><secondary>pepr3d::GeometryUtils</secondary></indexterm>
<indexterm><primary>pepr3d::GeometryUtils</primary><secondary>has_valid_orientation_polygon_with_holes</secondary></indexterm>
<computeroutput>template&lt;typename Traits_2 &gt; </computeroutput><para><computeroutput>static bool pepr3d::GeometryUtils::has_valid_orientation_polygon_with_holes (const typename Traits_2::Polygon_with_holes_2 &amp; pgn, const Traits_2 &amp; traits)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>
<para>Outer boundary must be counterclockwise</para>

<para>Holes must be clockwise </para>
    </section><anchor xml:id="_classpepr3d_1_1_geometry_utils_1a6fe5d1ec681688da1e249a0f87a4944d"/>    <section>
    <title>simplifyPolygon()</title>
<indexterm><primary>simplifyPolygon</primary><secondary>pepr3d::GeometryUtils</secondary></indexterm>
<indexterm><primary>pepr3d::GeometryUtils</primary><secondary>simplifyPolygon</secondary></indexterm>
<computeroutput>template&lt;typename K &gt; </computeroutput><para><computeroutput>static bool pepr3d::GeometryUtils::simplifyPolygon (CGAL::Polygon_2&lt; K &gt; &amp; poly)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Simplify polygon, removing unnecessary vertices. </para>
</para>

<para><formalpara><title>Returns: </title>

<para>true Polygon was simplified </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
D:/Home/MFF/1-Mgr/projekt/pepr3d/src/geometry/GeometryUtils.hD:/Home/MFF/1-Mgr/projekt/pepr3d/src/geometry/GeometryUtils.cpp</section>
</section>
