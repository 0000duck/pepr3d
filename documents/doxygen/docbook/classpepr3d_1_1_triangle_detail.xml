<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classpepr3d_1_1_triangle_detail">
<title>pepr3d::TriangleDetail Class Reference</title>
<indexterm><primary>pepr3d::TriangleDetail</primary></indexterm>
<para>

<para>Represents additional triangles that replace the original one. </para>
 
</para>
<para>
<computeroutput>#include &lt;TriangleDetail.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structpepr3d_1_1_triangle_detail_1_1_exact_triangle">ExactTriangle</link></para>

<para>Exact triangle with colour and polygon information. </para>
</listitem>
            <listitem><para>struct <link linkend="_structpepr3d_1_1_triangle_detail_1_1_face_info">FaceInfo</link></para>

<para>Used in triangulation to distinguish filled faces from holes. </para>
</listitem>
            <listitem><para>struct <link linkend="_structpepr3d_1_1_triangle_detail_1_1_sphere_intersection_visitor">SphereIntersectionVisitor</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ac8aeea781673db9a1310d3754ae88162"/>using <emphasis role="strong">K</emphasis> = CGAL::Exact_spherical_kernel_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a5859c7791d50841feed809f364e9d7db"/>using <emphasis role="strong">Polygon</emphasis> = CGAL::Polygon_2&lt; K &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a039d2236b4e8aad6a2e38561632de058"/>using <emphasis role="strong">PolygonWithHoles</emphasis> = CGAL::Polygon_with_holes_2&lt; K &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ab3714e9fe2715a106d89ef9db6fe1773"/>using <emphasis role="strong">GeneralPolygon</emphasis> = CGAL::General_polygon_2&lt; K &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a6db5a16950df85449f31b2942a594ee4"/>using <emphasis role="strong">Circle</emphasis> = TriangleDetail::K::Circle_2</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a219a64553d6903e53c2a0e554c085be3"/>using <emphasis role="strong">Circle3</emphasis> = TriangleDetail::K::Circle_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1aa5ad5f3d5e27f70a1f5308103fb49fae"/>using <emphasis role="strong">Sphere</emphasis> = TriangleDetail::K::Sphere_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a433097027b9cb64c5cc1773ea3362b24"/>using <emphasis role="strong">Triangle2</emphasis> = TriangleDetail::K::Triangle_2</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1add21fa0f5067429e5214ad6b71dfe0cc"/>using <emphasis role="strong">PolygonSet</emphasis> = CGAL::Polygon_set_2&lt; K &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a0dd0c71e30197e8ea3917e609aa3b4ed"/>using <emphasis role="strong">Traits</emphasis> = TriangleDetail::PolygonSet::Traits_2</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1afd25e5b8b0ca3a320f8de2f1233e60bd"/>using <emphasis role="strong">PeprPoint2</emphasis> = DataTriangle::K::Point_2</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ab41625f7067e442f5840dc1ab8bcf2c4"/>using <emphasis role="strong">PeprPoint3</emphasis> = DataTriangle::K::Point_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a2e9128e6fe7dc22dd5f6377282e39ae1"/>using <emphasis role="strong">PeprVector3</emphasis> = DataTriangle::K::Vector_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ab85cd57fea1decf01a3afe6fbe3ee135"/>using <emphasis role="strong">Point2</emphasis> = TriangleDetail::K::Point_2</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a575c3b3f3196a6f23b1944eeb628813a"/>using <emphasis role="strong">Point3</emphasis> = TriangleDetail::K::Point_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1afe6926469de5e0dec620a0b640b1968a"/>using <emphasis role="strong">Vector2</emphasis> = TriangleDetail::K::Vector_2</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a61a5b3b8f778b46b50f6d01d62de8a49"/>using <emphasis role="strong">Vector3</emphasis> = TriangleDetail::K::Vector_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ac51978cae21325ae859138c55c9b1f24"/>using <emphasis role="strong">Plane</emphasis> = TriangleDetail::K::Plane_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1abedc3bea984b7db652cb05453bec6ee8"/>using <emphasis role="strong">Line3</emphasis> = TriangleDetail::K::Line_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a6b06b451a0da04ecbc856b7f47fbeb25"/>using <emphasis role="strong">Line2</emphasis> = TriangleDetail::K::Line_2</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ab0d804fda63bc0e77791140b7aa0f5b8"/>using <emphasis role="strong">Segment3</emphasis> = TriangleDetail::K::Segment_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a198d39df083f914a5885befc81ae9220"/>using <emphasis role="strong">Segment2</emphasis> = TriangleDetail::K::Segment_2</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1aca7cfbf857504802dd7e5de02c107565"/>using <emphasis role="strong">PeprTriangle</emphasis> = DataTriangle::Triangle</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a09abf37409b283619fb5448bbdd08e7d"/>using <emphasis role="strong">PeprPlane</emphasis> = DataTriangle::K::Plane_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a19cdbad7a9cc454e6d4a0b9573793278"/>using <emphasis role="strong">PeprSphere</emphasis> = DataTriangle::K::Sphere_3</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a4966cf22583406b8fe0f171b09ff7fd5"/>using <emphasis role="strong">Fbb</emphasis> = CGAL::Triangulation_face_base_with_info_2&lt; <link linkend="_structpepr3d_1_1_triangle_detail_1_1_face_info">FaceInfo</link>, K &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a3bfe107a55791ce912d291832f1c3c5f"/>using <emphasis role="strong">Fb</emphasis> = CGAL::Constrained_triangulation_face_base_2&lt; K, Fbb &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a7ea6f709dd9bead683d75616fde6657f"/>using <emphasis role="strong">Tds</emphasis> = CGAL::Triangulation_data_structure_2&lt; CGAL::Triangulation_vertex_base_2&lt; K &gt;, Fb &gt;</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a68c7fa9d0ed3fd567a38f771f69b48b6"/>using <emphasis role="strong">ConstrainedTriangulation</emphasis> = CGAL::Constrained_triangulation_2&lt; K, Tds, CGAL::No_intersection_tag &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a33380ae8d2798829b809316ceb653b4c"/><emphasis role="strong">TriangleDetail</emphasis> (const <link linkend="_classpepr3d_1_1_data_triangle">DataTriangle</link> &amp;original)</para>
</listitem>
            <listitem><para>void <link linkend="_classpepr3d_1_1_triangle_detail_1a18e1da05e7fb8b50198a9152d238af85">paintSphere</link> (const PeprSphere &amp;sphere, int minSegments, size_t color)</para>

<para>Paint sphere onto this detail. </para>
</listitem>
            <listitem><para>void <link linkend="_classpepr3d_1_1_triangle_detail_1a74eeb9464b6262f5d0b9ec2c8a0c4964">paintShape</link> (const std::vector&lt; PeprPoint3 &gt; &amp;shape, const PeprVector3 &amp;direction, size_t color)</para>

<para>Paint a shape to triangle detail. </para>
</listitem>
            <listitem><para>void <link linkend="_classpepr3d_1_1_triangle_detail_1a7a2dc9dd17ebc6ec57e4598a9ce48bad">paintShape</link> (const std::vector&lt; PeprTriangle &gt; &amp;triangles, const PeprVector3 &amp;direction, size_t color)</para>

<para>Paint a shape to triangle detail. </para>
</listitem>
            <listitem><para>std::pair&lt; bool, bool &gt; <link linkend="_classpepr3d_1_1_triangle_detail_1a30215d8b668385e1f6c145545d9366f2">correctSharedVertices</link> (<link linkend="_classpepr3d_1_1_triangle_detail">TriangleDetail</link> &amp;other)</para>

<para>Makes sure all vertices on the common edge between these two triangles are matched Creates new vertices for both triangles if there are missing You will need to <link linkend="_classpepr3d_1_1_triangle_detail_1a55836364f8bca5dce29da4a7320adf65">updateTrianglesFromPolygons()</link> after calling this method! </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1af71efedfe287618fc844fbd2b68b0082"/>const std::vector&lt; <link linkend="_classpepr3d_1_1_data_triangle">DataTriangle</link> &gt; &amp; <emphasis role="strong">getTriangles</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ac206277a3049356735f0f8f3294ad3a8"/>const <link linkend="_classpepr3d_1_1_data_triangle">DataTriangle</link> &amp; <emphasis role="strong">getOriginal</emphasis> () const</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a55836364f8bca5dce29da4a7320adf65"/>void <link linkend="_classpepr3d_1_1_triangle_detail_1a55836364f8bca5dce29da4a7320adf65">updateTrianglesFromPolygons</link> ()</para>

<para>Create new triangles from a set of colored polygons Tries to simplify the polygons in the process. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ab27f8b435c7c88f80eb35caac5ae9d34"/>void <link linkend="_classpepr3d_1_1_triangle_detail_1ab27f8b435c7c88f80eb35caac5ae9d34">setColor</link> (size_t detailIdx, size_t color)</para>

<para>Set color of a detail triangle. </para>
</listitem>
            <listitem><para>void <link linkend="_classpepr3d_1_1_triangle_detail_1a5a7bf09704143a299bb2d6261d540729">addPolygon</link> (const Polygon &amp;poly, size_t color)</para>

<para>Add polygon to the detail. </para>
</listitem>
            <listitem><para>void <link linkend="_classpepr3d_1_1_triangle_detail_1af1656510445bacca593a631571f83c7f">addPolygonSet</link> (PolygonSet &amp;polySet, size_t color)</para>

<para>Add polygon set to the detail. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a3d8d23f8835e264356b503cc495c71e4"/>std::set&lt; Point3 &gt; <link linkend="_classpepr3d_1_1_triangle_detail_1a3d8d23f8835e264356b503cc495c71e4">findPointsOnEdge</link> (const Segment3 &amp;edge)</para>

<para>Find all points of polygons that are on the edge. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1af671c482070226f504855f702e1cf9ac"/>template&lt;class Archive &gt; </para><para>void <emphasis role="strong">save</emphasis> (Archive &amp;archive) const</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1acad2f44169bb8872522e60d11f54fe86"/>template&lt;class Archive &gt; </para><para>void <emphasis role="strong">load</emphasis> (Archive &amp;archive)</para>
</listitem>
            <listitem><para>template&lt;typename ColorFunc &gt; </para><para>void <link linkend="_classpepr3d_1_1_triangle_detail_1a9bce9da8bea065df486537a2933f635c">changeColorIds</link> (const ColorFunc &amp;colorFunc)</para>

<para>Change color IDs of this detail. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1adeb9f4f75d811ad26309a4638bced4b0"/>static K::Point_2 <link linkend="_classpepr3d_1_1_triangle_detail_1adeb9f4f75d811ad26309a4638bced4b0">toExactK</link> (const PeprPoint2 &amp;point)</para>

<para>Convert Point_2 from Pepr3d kernel to Exact kernel. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1afa092868a47bbadc6e4d48f4d985bfab"/>static K::Point_3 <link linkend="_classpepr3d_1_1_triangle_detail_1afa092868a47bbadc6e4d48f4d985bfab">toExactK</link> (const PeprPoint3 &amp;point)</para>

<para>Convert Point_3 from Pepr3d kernel to Exact kernel. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a1bab79b6e5843936aef0c47620a888ec"/>static K::Point_3 <link linkend="_classpepr3d_1_1_triangle_detail_1a1bab79b6e5843936aef0c47620a888ec">toExactK</link> (const glm::vec3 &amp;vec)</para>

<para>Convert glm::vec3 to Exact kernel. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a12c5b966586348c4dc96bba207ec9926"/>static K::Vector_3 <link linkend="_classpepr3d_1_1_triangle_detail_1a12c5b966586348c4dc96bba207ec9926">toExactK</link> (const PeprVector3 &amp;vec)</para>

<para>Convert Point_3 from Pepr3d kernel to Exact kernel. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ac85fa082aaa6c3f8cddca396516857d5"/>static PeprPoint2 <link linkend="_classpepr3d_1_1_triangle_detail_1ac85fa082aaa6c3f8cddca396516857d5">toNormalK</link> (const K::Point_2 &amp;point)</para>

<para>Convert Exact kernel Point_2 to normal Pepr3d kernel. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a49ed4eb7b270a5173db8257e822cac14"/>static PeprPoint3 <link linkend="_classpepr3d_1_1_triangle_detail_1a49ed4eb7b270a5173db8257e822cac14">toNormalK</link> (const K::Point_3 &amp;point)</para>

<para>Convert Exact kernel Point_3 to normal Pepr3d kernel. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a013e7b3a720d433ce10ea3eed3438fc4"/>static glm::vec3 <link linkend="_classpepr3d_1_1_triangle_detail_1a013e7b3a720d433ce10ea3eed3438fc4">toGlmVec</link> (const PeprPoint3 &amp;pt)</para>

<para>Convert Pepr Point_3 to vec3. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a19a7cded9a34b708ac7e909d47c3b0a6"/>static glm::vec3 <link linkend="_classpepr3d_1_1_triangle_detail_1a19a7cded9a34b708ac7e909d47c3b0a6">toGlmVec</link> (const K::Point_3 &amp;point)</para>

<para>Convert Exact kernel Point_3 to vec3. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a3a270f31457d95be3039509a36f1559c"/>static double <emphasis role="strong">exactToDbl</emphasis> (const CGAL::Gmpq &amp;num)</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a0ca54d4a96e232c5ed34095e2133c99e"/>static double <emphasis role="strong">exactToDbl</emphasis> (const CGAL::Gmpz &amp;num)</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ad8daeb9c2bdb4d033a553ec4fa35e5a0"/>static std::map&lt; size_t, PolygonSet &gt; <link linkend="_classpepr3d_1_1_triangle_detail_1ad8daeb9c2bdb4d033a553ec4fa35e5a0">createPolygonSetsFromTriangles</link> (const std::vector&lt; <link linkend="_structpepr3d_1_1_triangle_detail_1_1_exact_triangle">ExactTriangle</link> &gt; &amp;trianglesExact)</para>

<para>Creates a map of [ColorID, PolygonSet] of polygon sets made of provided triangles @triangles array of DataTriangles, only used to get color information @trianglesExact array of Epeck Triangles, used to get exact bounds of each triangle. </para>
</listitem>
            <listitem><para>static std::vector&lt; Triangle2 &gt; <link linkend="_classpepr3d_1_1_triangle_detail_1a8409d1df8edf713beaf1743c0399c6d4">triangulatePolygon</link> (const PolygonWithHoles &amp;poly)</para>

<para>Break down a polygon into an array of triangles. </para>
</listitem>
            <listitem><para>static bool <link linkend="_classpepr3d_1_1_triangle_detail_1a967a585a18caab0270893b3e757030d4">isEdgeTraversable</link> (const Point2 &amp;form, const Point2 &amp;to, const std::map&lt; size_t, PolygonSet &gt; &amp;coloredPolys)</para>

<para>Tests for an existance of a path between the two points. All edges of this path must lie on an edge between the original points. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ae52e30e876624fe52bdb0724da98bda5"/>std::vector&lt; std::pair&lt; Point2, double &gt; &gt; <link linkend="_classpepr3d_1_1_triangle_detail_1ae52e30e876624fe52bdb0724da98bda5">getCircleSharedPoints</link> (const Circle3 &amp;circle, const Vector3 &amp;xBase, const Vector3 &amp;yBase) const</para>

<para>Get points of a circle that are shared with border triangles. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a4e04c9ef44eb6d48dacce49e547ba190"/>Segment3 <link linkend="_classpepr3d_1_1_triangle_detail_1a4e04c9ef44eb6d48dacce49e547ba190">findSharedEdge</link> (const <link linkend="_classpepr3d_1_1_triangle_detail">TriangleDetail</link> &amp;other)</para>

<para>Find shared edge between triangles. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a876f96672cba689d1f74cac6e179192f"/>Polygon <emphasis role="strong">projectShapeToPolygon</emphasis> (const std::vector&lt; PeprPoint3 &gt; &amp;shape, const PeprVector3 &amp;direction)</para>
</listitem>
            <listitem><para>bool <link linkend="_classpepr3d_1_1_triangle_detail_1a9d193b7c01d33c650b58738aed37e0e6">addMissingPoints</link> (const std::set&lt; Point3 &gt; &amp;myPoints, const std::set&lt; Point3 &gt; &amp;theirPoints, const Segment3 &amp;sharedEdge)</para>

<para>Add points that are missing to our polygons. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1aed92acb55850155cbc54142653afbcc4"/>Polygon <link linkend="_classpepr3d_1_1_triangle_detail_1aed92acb55850155cbc54142653afbcc4">polygonFromCircle</link> (const Circle3 &amp;circle, int segments) const</para>

<para>Construct a polygon from a circle. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a01d113a2666085931fc5d6ff28ae57df"/>Polygon <link linkend="_classpepr3d_1_1_triangle_detail_1a01d113a2666085931fc5d6ff28ae57df">polygonFromTriangle</link> (const PeprTriangle &amp;tri) const</para>

<para>Create a polygon from a PeprTriangle. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a8b6a41c7c881886bde6d1543beac68c8"/>void <link linkend="_classpepr3d_1_1_triangle_detail_1a8b6a41c7c881886bde6d1543beac68c8">simplifyPolygons</link> ()</para>

<para>Simplify polygons, removing any vertices that are collinear. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a3a0599a7b678c981256cfc1a2a720dd4"/>void <link linkend="_classpepr3d_1_1_triangle_detail_1a3a0599a7b678c981256cfc1a2a720dd4">updatePolysFromTriangles</link> ()</para>

<para>Generate one colored polygon set for each color inside the triangle This is a slow operation. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a9e9541120fb03635e37a298df6a60dc3"/>void <link linkend="_classpepr3d_1_1_triangle_detail_1a9e9541120fb03635e37a298df6a60dc3">addTrianglesFromPolygon</link> (const PolygonWithHoles &amp;poly, size_t color)</para>

<para>Add triangles from this polygon to our triangles. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a0f5dfb297e953aba6b0ef3f80fede185"/>void <link linkend="_classpepr3d_1_1_triangle_detail_1a0f5dfb297e953aba6b0ef3f80fede185">debugEdgeConsistencyCheck</link> ()</para>

<para>Verify that the bound vertices are connected via a string of edges. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1aa4a23f1168e2e50a4ea45ead29968204"/>static bool <link linkend="_classpepr3d_1_1_triangle_detail_1aa4a23f1168e2e50a4ea45ead29968204">trianglePolygonsDoIntersect</link> (const Polygon &amp;first, const Polygon &amp;second)</para>

<para>Do two polygons that are triangles intersect This is faster than checking an intersection between polygons of any size. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ab5e7973064972305de9c74d424d90225"/>static Polygon <link linkend="_classpepr3d_1_1_triangle_detail_1ab5e7973064972305de9c74d424d90225">polygonFromTriangle</link> (const Triangle2 &amp;tri)</para>

<para>Create a polygon from 2D triangle in plane coordinates. </para>
</listitem>
            <listitem><para>static void <link linkend="_classpepr3d_1_1_triangle_detail_1a0b2324c84ed90dc0e4ad7d14cdd5aa75">markDomains</link> (ConstrainedTriangulation &amp;ct)</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a42d9d3fc7908f325cf64118061c6dea5"/>static void <emphasis role="strong">markDomains</emphasis> (ConstrainedTriangulation &amp;ct, ConstrainedTriangulation::Face_handle start, int index, std::deque&lt; ConstrainedTriangulation::Edge &gt; &amp;border)</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a6b75cb4b0e71622fe4ffdafdedecf379"/>static void <link linkend="_classpepr3d_1_1_triangle_detail_1a6b75cb4b0e71622fe4ffdafdedecf379">debugOnlyVerifyPolygonSet</link> (const PolygonSet &amp;pSet)</para>

<para>Verify that polygon set is made of valid polygons with holes. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a4739e317a83230e718680cabf62a4e59"/>std::vector&lt; <link linkend="_classpepr3d_1_1_data_triangle">DataTriangle</link> &gt; <link linkend="_classpepr3d_1_1_triangle_detail_1a4739e317a83230e718680cabf62a4e59">mTriangles</link></para>

<para>Temporary storage for DataTriangles. This gets overwritten on every time <link linkend="_classpepr3d_1_1_triangle_detail_1a55836364f8bca5dce29da4a7320adf65">updateTrianglesFromPolygons()</link> is run. Triangles stored here are non-degenerate triangles that roughly make up the original triangle. Becasue <link linkend="_classpepr3d_1_1_data_triangle">DataTriangle</link> is using a limited-precission, these triangles cannot be used to reconstruct the surface. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1aa8ffb6f58e83ec892a8cd9d82d3e9054"/>std::vector&lt; size_t &gt; <link linkend="_classpepr3d_1_1_triangle_detail_1aa8ffb6f58e83ec892a8cd9d82d3e9054">mTrianglesToExactIdx</link></para>

<para>Stores index of exact triangle to every <link linkend="_classpepr3d_1_1_data_triangle">DataTriangle</link> of this detail (mTriangles.size() == mTrianglesToExactIdx.size()) Every <link linkend="_classpepr3d_1_1_data_triangle">DataTriangle</link> in this detail has matching exact triangle. But not all exact triangles have a DataTriange - some degenerate. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a6816ebdc0f458261f4f73e24c599bbdd"/>std::vector&lt; <link linkend="_structpepr3d_1_1_triangle_detail_1_1_exact_triangle">ExactTriangle</link> &gt; <link linkend="_classpepr3d_1_1_triangle_detail_1a6816ebdc0f458261f4f73e24c599bbdd">mTrianglesExact</link></para>

<para>Stores epeck triangles. This gets overwritten on every time <link linkend="_classpepr3d_1_1_triangle_detail_1a55836364f8bca5dce29da4a7320adf65">updateTrianglesFromPolygons()</link> is run. This is used for saving andpolygonset reconstruction. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a706689e78ae910e7bd4a799fc44db740"/>std::vector&lt; std::vector&lt; size_t &gt; &gt; <link linkend="_classpepr3d_1_1_triangle_detail_1a706689e78ae910e7bd4a799fc44db740">mPolygonDegenerateTriangles</link></para>

<para>Stores index into mTrianglesExact of every degenerate triangle(when represented as DataTriangle), grouped by the polygon it belongs to. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a93dde966f3762bad3f47b0932bbcc70a"/>std::map&lt; size_t, PolygonSet &gt; <emphasis role="strong">mColoredPolys</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a4c6c24850c358f6a553b78b1460338fe"/><link linkend="_classpepr3d_1_1_data_triangle">DataTriangle</link> <emphasis role="strong">mOriginal</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a80df9f3e1d10aafc8d6136490f332c5f"/>Polygon <link linkend="_classpepr3d_1_1_triangle_detail_1a80df9f3e1d10aafc8d6136490f332c5f">mBounds</link></para>

<para>Bounds of the original triangle. </para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a1f21de29cd698369a8a8bf9f357cdcb2"/>Plane <emphasis role="strong">mOriginalPlane</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1af49e18248a04af06f958001518b73db0"/>bool <link linkend="_classpepr3d_1_1_triangle_detail_1af49e18248a04af06f958001518b73db0">mColorChanged</link> = false</para>

<para>Did color of any detail triangle change since last triangulation? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1af3b751ca10e1e87e63d49d58f1e6d142"/>static const int <emphasis role="strong">VERTICES_PER_UNIT_CIRCLE</emphasis> = 50</para>
</listitem>
            <listitem><para><anchor xml:id="_classpepr3d_1_1_triangle_detail_1ac9259653e0e58901b931ef725df2eb49"/>static const int <emphasis role="strong">MIN_VERTICES_IN_CIRCLE</emphasis> = 12</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Represents additional triangles that replace the original one. </para>



<para>Allows &quot;painting&quot; over the original triangle by creating a polygonal representation of the new shapes, which is then converted back to triangles. </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classpepr3d_1_1_triangle_detail_1a9d193b7c01d33c650b58738aed37e0e6"/>    <section>
    <title>addMissingPoints()</title>
<indexterm><primary>addMissingPoints</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>addMissingPoints</secondary></indexterm>
<para><computeroutput>bool pepr3d::TriangleDetail::addMissingPoints (const std::set&lt; Point3 &gt; &amp; myPoints, const std::set&lt; Point3 &gt; &amp; theirPoints, const Segment3 &amp; sharedEdge)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Add points that are missing to our polygons. </para>
</para>

<para><formalpara><title>Returns: </title>

<para>true if any points were added </para>
</formalpara>
</para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a5a7bf09704143a299bb2d6261d540729"/>    <section>
    <title>addPolygon()</title>
<indexterm><primary>addPolygon</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>addPolygon</secondary></indexterm>
<para><computeroutput>void pepr3d::TriangleDetail::addPolygon (const Polygon &amp; poly, size_t color)</computeroutput></para><para>

<para>Add polygon to the detail. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>poly</entry>
                                <entry>
<para>Polygon in the plane-space of this detail </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1af1656510445bacca593a631571f83c7f"/>    <section>
    <title>addPolygonSet()</title>
<indexterm><primary>addPolygonSet</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>addPolygonSet</secondary></indexterm>
<para><computeroutput>void pepr3d::TriangleDetail::addPolygonSet (PolygonSet &amp; polySet, size_t color)</computeroutput></para><para>

<para>Add polygon set to the detail. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>poly</entry>
                                <entry>
<para>PolygonSet in the plane-space of this detail </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a9bce9da8bea065df486537a2933f635c"/>    <section>
    <title>changeColorIds()</title>
<indexterm><primary>changeColorIds</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>changeColorIds</secondary></indexterm>
<computeroutput>template&lt;typename ColorFunc &gt; </computeroutput><para><computeroutput>void pepr3d::TriangleDetail::changeColorIds (const ColorFunc &amp; colorFunc)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Change color IDs of this detail. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ColorFunc</entry>
                                <entry>
<para>functor of type size_t func(size_t originalColor), that returns the new color ID </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a30215d8b668385e1f6c145545d9366f2"/>    <section>
    <title>correctSharedVertices()</title>
<indexterm><primary>correctSharedVertices</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>correctSharedVertices</secondary></indexterm>
<para><computeroutput>std::pair&lt; bool, bool &gt; pepr3d::TriangleDetail::correctSharedVertices (<link linkend="_classpepr3d_1_1_triangle_detail">TriangleDetail</link> &amp; other)</computeroutput></para><para>

<para>Makes sure all vertices on the common edge between these two triangles are matched Creates new vertices for both triangles if there are missing You will need to <link linkend="_classpepr3d_1_1_triangle_detail_1a55836364f8bca5dce29da4a7320adf65">updateTrianglesFromPolygons()</link> after calling this method! </para>
</para>

<para><formalpara><title>Returns: </title>

<para>&lt;bool,bool&gt; true if points were added to a triangle </para>
</formalpara>
</para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a967a585a18caab0270893b3e757030d4"/>    <section>
    <title>isEdgeTraversable()</title>
<indexterm><primary>isEdgeTraversable</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>isEdgeTraversable</secondary></indexterm>
<para><computeroutput>static bool pepr3d::TriangleDetail::isEdgeTraversable (const Point2 &amp; form, const Point2 &amp; to, const std::map&lt; size_t, PolygonSet &gt; &amp; coloredPolys)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Tests for an existance of a path between the two points. All edges of this path must lie on an edge between the original points. </para>
</para>

<para><formalpara><title>Returns: </title>

<para>true A path exists </para>
</formalpara>
</para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a0b2324c84ed90dc0e4ad7d14cdd5aa75"/>    <section>
    <title>markDomains()</title>
<indexterm><primary>markDomains</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>markDomains</secondary></indexterm>
<para><computeroutput>void pepr3d::TriangleDetail::markDomains (ConstrainedTriangulation &amp; ct)<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para>
<para><formalpara><title>( From <link linkend="_namespace_c_g_a_l">CGAL</link> User Manual ) </title></formalpara>
</para>

<para>explore set of facets connected with non constrained edges, and attribute to each such set a nesting level. </para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a74eeb9464b6262f5d0b9ec2c8a0c4964"/>    <section>
    <title>paintShape()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>paintShape</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>paintShape</secondary></indexterm>
<para><computeroutput>void pepr3d::TriangleDetail::paintShape (const std::vector&lt; PeprPoint3 &gt; &amp; shape, const PeprVector3 &amp; direction, size_t color)</computeroutput></para><para>

<para>Paint a shape to triangle detail. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>shape</entry>
                                <entry>
<para>Collection of points that form a polygon, that is going to be projected onto the <link linkend="_classpepr3d_1_1_triangle_detail">TriangleDetail</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>direction</entry>
                                <entry>
<para>Direction vector of the projection </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a7a2dc9dd17ebc6ec57e4598a9ce48bad"/>    <section>
    <title>paintShape()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>paintShape</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>paintShape</secondary></indexterm>
<para><computeroutput>void pepr3d::TriangleDetail::paintShape (const std::vector&lt; PeprTriangle &gt; &amp; triangles, const PeprVector3 &amp; direction, size_t color)</computeroutput></para><para>

<para>Paint a shape to triangle detail. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>triangles</entry>
                                <entry>
<para>Collection of triangles that form a shape, that is going to be projected onto the <link linkend="_classpepr3d_1_1_triangle_detail">TriangleDetail</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>direction</entry>
                                <entry>
<para>Direction vector of the projection </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a18e1da05e7fb8b50198a9152d238af85"/>    <section>
    <title>paintSphere()</title>
<indexterm><primary>paintSphere</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>paintSphere</secondary></indexterm>
<para><computeroutput>void pepr3d::TriangleDetail::paintSphere (const PeprSphere &amp; sphere, int minSegments, size_t color)</computeroutput></para><para>

<para>Paint sphere onto this detail. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>minSegments</entry>
                                <entry>
<para>Minimum number of segments of each sphere/plane intersection. Additional points may be added on boundaries. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classpepr3d_1_1_triangle_detail_1a8409d1df8edf713beaf1743c0399c6d4"/>    <section>
    <title>triangulatePolygon()</title>
<indexterm><primary>triangulatePolygon</primary><secondary>pepr3d::TriangleDetail</secondary></indexterm>
<indexterm><primary>pepr3d::TriangleDetail</primary><secondary>triangulatePolygon</secondary></indexterm>
<para><computeroutput>std::vector&lt; TriangleDetail::Triangle2 &gt; pepr3d::TriangleDetail::triangulatePolygon (const PolygonWithHoles &amp; poly)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Break down a polygon into an array of triangles. </para>
</para>

<para><formalpara><title>Returns: </title>

<para>vector of exact triangles that make up the polygon </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
D:/Home/MFF/1-Mgr/projekt/pepr3d/src/geometry/TriangleDetail.hD:/Home/MFF/1-Mgr/projekt/pepr3d/src/geometry/TriangleDetail.cpp</section>
</section>
